name: CI

on:
  push:
    branches: [main]
    tags: ["v*"]
  pull_request:
    branches: [main]

jobs:
  sssnake_ci:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install project
        run: |
          python -m pip install --upgrade pip
          pip install -e .[game]

      - name: Ruff check
        run: ruff check .

      - name: Black check
        run: black --check .

      - name: Mypy check
        run: mypy . --exclude build/

      - name: Run pytest with coverage
        run: pytest --cov=sssnake --cov-report=xml --cov-report=term-missing -q

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: coverage.xml
          flags: unittests
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}
      - name: Build package
        run: | 
          python -m pip install --upgrade build
          python -m build --sdist --wheel

      - name: Upload package artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sssnake-dist
          path: dist/*

      - name: Get current version
        id: get_version
        run: |
          VERSION=$(python -c 'import importlib.metadata as m; print(m.version("sssnake"))')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Get latest tag
        id: get_latest
        run: |
          git fetch --tags
          LATEST_TAG=$(git describe --tags --abbrev=0 --match "v*" 2>/dev/null || echo "")
          echo "latest=$LATEST_TAG" >> $GITHUB_OUTPUT

      - name: Create GitHub Release if version changed
        if: steps.get_version.outputs.version != steps.get_latest.outputs.latest
        uses: actions/create-release@v1
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: Release v${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to TestPyPI
        if: startsWith(github.ref, 'refs/tags/')
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_TOKEN }}
        run: |
          python -m pip install --upgrade twine
          twine upload --repository testpypi dist/*